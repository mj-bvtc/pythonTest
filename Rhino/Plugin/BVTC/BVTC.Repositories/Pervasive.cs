using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Reflection;
using System.Data;
using Pervasive.Data.SqlClient;

namespace BVTC.Repositories
{
    public class Pervasive : database
    {
        // over loaded initialize methods //
        public Pervasive() : base() { }
        public Pervasive(string server, string db) : base(server, db)
        {
            OpenDB(); 
        }

        // make connection object with correct type //
        public PsqlConnection conn { get; set; }

        // override open and close methods //
        public override void OpenDB()
        {

            // Make sure the computer has access to the .SDF file.
            // Setup and open() the connection to the SDF database. 

            this.setup = false;
            // Make Connection string //
            this.connString = this.BuildConnectionString();

            try
            {
                // try to create new connection and open it //
                this.conn = new PsqlConnection(this.connString);
                this.conn.Open();
                this.setup = true;
            }
            catch
            {
                // if something goes wrong: setup to false //
                this.setup = false;
                throw new Exceptions.OpenDB(
                    string.Format("Unable to connect to DB using string: '{0}'", this.connString));
            }
            
        }
        public override void CloseDB()
        {
            //Close the connection.
            //Very important so we don't leave open threads/seats on DB.
            try { this.conn.Close(); }
            catch (Exception)
            {
            }
            finally { this.setup = false; }
        }

        // override execute command methods //
        public override string CommandToString(string cmdStr)
        {
            // throw a new exception if the database is not open //
            if(this.setup != true)
            {
                throw new Exceptions.OpenDB(
                    string.Format("No connection currently exists to: {0}", this.databaseName));
            }

            string result = "";
            // create new DataTable //
            DataTable dt = new DataTable();
            if (this.setup == false) { return result; }

            PsqlCommand cmd = new PsqlCommand(cmdStr, this.conn);

            // load and close reader //
            PsqlDataReader reader = cmd.ExecuteReader();
            reader.Read();

            if (reader.HasRows)
            {
                result = reader.GetString(0).Trim();
            }
            

            reader.Close();

            return result;
        }
        public override List<string> CommandToList(string cmdStr)
        {
            // create new DataTable //
            List<string> list = new List<string>();
            if (this.setup == false)
            {
                throw new Exceptions.OpenDB(
                    string.Format("Connection not open to: {0}", this.databaseName));
            }

            try
            {
                PsqlCommand cmd = new PsqlCommand(cmdStr, this.conn);

                // load and close reader //
                PsqlDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    var value = reader[0];
                    string str;
                    // trim white space from behind CHAR() data //
                    if (value.GetType() == typeof(string))
                        str = ((string)value).Trim();
                    // convert non-strings to strings //
                    else
                        str = value.ToString();
                    // add resulting string to list //
                    list.Add(str);

                }
                reader.Close();
            }
            catch (Exception)
            {
                throw new Exceptions.CommandDB(string.Format("Could not query database: {0}{1}{2}{1}{3}", 
                    this.databaseName, Environment.NewLine, this.connString, cmdStr));
            }

            return list;
        }
        public override DataTable CommandToDataTable(string cmdStr)
        {
            // create new DataTable //
            DataTable dt = new DataTable();
            if (this.setup == false) { return dt; }

            PsqlCommand cmd = new PsqlCommand(cmdStr, this.conn);

            // load and close reader //
            PsqlDataReader reader = cmd.ExecuteReader();
            if (reader.FieldCount > 0) { dt.Load(reader); }
            else
            {
                throw new Exceptions.InvalidTable(
                    string.Format("the reader generated by {0} does not have any columns", cmdStr));
            }
            reader.Close();

            return dt;
        }
        public override int ExecuteCommand(string cmdStr)
        {
            /* Executes a non-query PSQL command.
             * Used for deletes, inserts or updates.
             * Will return the number of rows effected.
             * -1 signifies an error processing the command.
             */
            int result = 0;
            if (this.setup == false) { return result; }

            PsqlCommand cmd = new PsqlCommand(cmdStr, this.conn);
            // run command //
            result = cmd.ExecuteNonQuery();

            // result is the number of rows effected //
            return result;
        }

        // override table scheme fuctions //
        public List<PsqlDbType> TableDataTypes(string tableName)
        {
            List<PsqlDbType> dbTypes = new List<PsqlDbType>();
            if (this.setup == false) { return dbTypes; }

            string cmdStr = string.Format("SELECT TOP 1 * FROM {0}", '"' + tableName + '"');
            PsqlCommand cmd = new PsqlCommand(cmdStr, this.conn);

            // load and close reader //
            PsqlDataReader reader = cmd.ExecuteReader();
            reader.Read();
            for (int i = 0; i < reader.FieldCount; i++)
            {
                string type = reader.GetDataTypeName(i);

                if (type == "INTEGER") { dbTypes.Add(PsqlDbType.Integer); }
                else if (type == "CHAR") { dbTypes.Add(PsqlDbType.Char); }
                else if (type == "DOUBLE") { dbTypes.Add(PsqlDbType.Double); }
                else if (type == "SHORT") { dbTypes.Add(PsqlDbType.SmallInt); }
                else if (type == "REAL") { dbTypes.Add(PsqlDbType.Real); }
                else
                {
                    dbTypes.Add(PsqlDbType.Char);
                }
            }
            
            return dbTypes;
        }
        public List<string> GetColumnNames(string table, bool quotes)
        {
            List<string> colNames = new List<string>();
            if (this.setup != true)
            {
                throw new Exceptions.OpenDB("C-Trac Connection is not currently open.");
            }

            // check to make sure the table is valid //
            if (table.ValidateTableName() != true)
            {
                throw new Exceptions.InvalidTable(string.Format("Table Name: '{0}' is not valid.", table));
            }

            // get list of fields in table //
            string cmdStr = string.Format("SELECT TOP 1 * FROM {0}", '"' + table + '"');

            // generate data table //
            DataTable dt = CommandToDataTable(cmdStr);

            // read all column names //
            foreach (DataColumn col in dt.Columns)
            {
                string name;
                if (quotes)
                    name = '"' + col.ColumnName + '"';
                else
                    name = col.ColumnName;

                colNames.Add(name);
            }

            return colNames;
        }
        public override List<string> GetColumnNames(string table)
        {
            return GetColumnNames(table, false);
        }

        
    }
}
